web应用采用单页面应用思路，用webpack模块化vue文件实现单个DOM结构实现。
1，github下载webpack示例文件—— vue-loader-example-master

2,webpack使用注意事项:
(1),改变vue文件中的内容后，需要做“npm run dev”操作更新。

3，webpack结构
##index.html —— 指定DOM文档流起始位置，调用build.js文件组装DOM结构。
代码：
  <div id="app"></div>
  <script src="build/build.js"></script>
  
##components
  -a.vue
  -b.vue
  -...  —— 模块化文件
代码：
<style>
.red {
  color: #f00;
}
</style>

<template>
  <h2 class="red">{{msg}}</h2>
</template>

<script>
module.exports = {
  data: function () {
    return {
      msg: 'Hello from Component A!'
    }
  }
}
</script>
  
## app.vue —— 应用的主模板，对接其他vue文件模块，模块调用声明
代码：
<template lang="jade">  //对接其他vue文件模块
h1 This is the app
div(v-component="a")
div(v-component="b")
div(v-component="test")
</template>

<script lang="coffee"> //模块调用声明
module.exports =
  components:
    a: require './components/a.vue'
    b: require './components/b.vue'
    test: require './components/test.vue'
</script>

## mian.js —— 调用vue模块，请求主模板，声明新的Vue构造函数，并赋予id为#app
代码：
var Vue = require('vue')
var appOptions = require('./app.vue')
var app = new Vue(appOptions).$mount('#app')

## webpack.config.js ——参考http://www.tuicool.com/articles/BrAVv2y
对Webpack的打包行为做了配置，主要分为几个部分：
entry：指定打包的入口文件，每有一个键值对，就是一个入口文件
output：配置打包结果，path定义了输出的文件夹，filename则定义了打包结果文件的名称，filename里面的 [name] 会由entry中的键（这里是entry1和entry2）替换
resolve：定义了解析模块路径时的配置，常用的就是extensions，可以用来指定模块的后缀，这样在引入模块时就不需要写后缀了，会自动补全
module：定义了对模块的处理逻辑，这里可以用loaders定义了一系列的加载器，以及一些正则。当需要加载的文件匹配test的正则时，就会调用后面的loader对文件进行处理，这正是webpack强大的原因。比如这里定义了凡是 .js 结尾的文件都是用 babel-loader 做处理，而 .jsx 结尾的文件会先经过 jsx-loader 处理，然后经过 babel-loader 处理。当然这些loader也需要通过 npm install 安装
plugins: 这里定义了需要使用的插件，比如commonsPlugin在打包多个入口文件时会提取出公用的部分，生成common.js

代码：
module.exports = {
    entry   : {
        index : './views/main.js'
    },
    output  : {
        path     : './public/build',
        filename : "build.js"
    },
    module  : {
        loaders : [
            {test : /\.vue$/, loader : 'vue'}
        ]
    }
};

